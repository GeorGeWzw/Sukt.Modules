@using System;
@using Sukt.CodeGenerator;

@{

    ProjectMetadata metadata = Model;
}

@*//------------------------------------------------------------------------------
//<auto-generated>
    //此代码由代码生成器生成。
    //手动更改此文件可能导致应用程序出现意外的行为。
    //如果重新生成代码，将覆盖对此文件的手动更改。
    //
</auto-generated>
//<copyright file="@(metadata.EntityMetadata.EntityName).cs" company="@metadata.Company">
    //@metadata.Copyright
    //
</copyright>
//<site>@metadata.SiteUrl</site>
//<last-editor>@metadata.Creator</last-editor>
//<last-date>@DateTime.Now.ToString("yyyy/MM/dd HH:mm")</last-date>
//------------------------------------------------------------------------------
*@

using System;
using System.Collections.Generic;
using System.ComponentModel;
using Sukt.Module.Core;
using Sukt.Module.Core.Entity;
using Sukt.Module.Core.OperationResult;
using Sukt.Module.Core.Extensions.ResultExtensions;
using @(metadata.Namespace).Dtos;
using System.Threading.Tasks;

namespace @(metadata.Namespace).Application
{

    /// &lt;summary&gt;
    ///@(string.IsNullOrEmpty(metadata.EntityMetadata.DisplayName) ? metadata.EntityMetadata.EntityName : metadata.EntityMetadata.DisplayName)
    /// &lt;/summary&gt;
    public interface I@(metadata.EntityMetadata.EntityName)Contract :IScopedDependency
    {
        /// &lt;summary&gt;
        /// 异步创建@(metadata.EntityMetadata.DisplayName)
        /// &lt;/summary&gt;
        /// &lt;param name="dto"&gt;添加的@(metadata.EntityMetadata.DisplayName)DTO&lt;/param&gt;
        Task&lt;OperationResponse&gt; CreateAsync(@(metadata.EntityMetadata.EntityName)InputDto dto);

        /// &lt;summary&gt;
        /// 异步更新@(metadata.EntityMetadata.DisplayName)
        /// &lt;/summary&gt;
        /// &lt;param name="dto"&gt;更新的@(metadata.EntityMetadata.DisplayName)DTO&lt;/param&gt;
        Task&lt;OperationResponse&gt; UpdateAsync(@metadata.EntityMetadata.PrimaryKeyType id,@(metadata.EntityMetadata.EntityName)InputDto dto);

        /// &lt;summary&gt;
        /// 异步加载表单@(metadata.EntityMetadata.DisplayName)
        /// &lt;/summary&gt;
        /// &lt;param name="id"&gt;要加载的@(metadata.EntityMetadata.DisplayName)主键&lt;/param&gt;
        Task&lt;OperationResponse&lt;@(metadata.EntityMetadata.EntityName)OutputDto&gt;&gt; LoadFormAsync(@metadata.EntityMetadata.PrimaryKeyType id);

        /// &lt;summary&gt;
        /// 异步删除@(metadata.EntityMetadata.DisplayName)
        /// &lt;/summary&gt;
        /// &lt;param name="id"&gt;要删除的@(metadata.EntityMetadata.DisplayName)主键&lt;/param&gt;
        Task&lt;OperationResponse&gt; DeleteAsync(@metadata.EntityMetadata.PrimaryKeyType id);

        /// &lt;summary&gt;
        /// 异步得到@(metadata.EntityMetadata.DisplayName)分页数据
        /// &lt;/summary&gt;
        /// &lt;param name="request"&gt;分页请求数据&lt;/param&gt;
        Task&lt;IPageResult&lt;@(metadata.EntityMetadata.EntityName)OutputDto&gt;&gt; GetPageAsync(PageRequest request);
    }
}
